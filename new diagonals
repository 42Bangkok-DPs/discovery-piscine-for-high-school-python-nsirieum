def is_in_check(board, king_position):
    king_row, king_col = king_position

    # Directions for rooks and queens (vertical and horizontal)
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for direction in directions:
        for step in range(1, 8):
            new_row = king_row + direction[0] * step
            new_col = king_col + direction[1] * step
            if 0 <= new_row < 8 and 0 <= new_col < 8:
                piece = board[new_row][new_col]
                if piece in BLACK_PIECES:
                    if piece == 'q' or (piece == 'r' and (direction[0] != 0 or direction[1] != 0)):
                        return True
                    break
                if piece != '.':
                    break

    # Directions for bishops and queens (diagonal)
    diagonal_directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
    for direction in diagonal_directions:
        for step in range(1, 8):
            new_row = king_row + direction[0] * step
            new_col = king_col + direction[1] * step
            if 0 <= new_row < 8 and 0 <= new_col < 8:
                piece = board[new_row][new_col]
                if piece in BLACK_PIECES:
                    if piece == 'q' or (piece == 'b' and (direction[0] != 0 and direction[1] != 0)):
                        return True
                    break
                if piece != '.':
                    break

    # Check for knights
    knight_moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]
    for move in knight_moves:
        new_row = king_row + move[0]
        new_col = king_col + move[1]
        if 0 <= new_row < 8 and 0 <= new_col < 8:
            if board[new_row][new_col] == 'n':
                return True

    # Check for pawns
    pawn_attacks = [(-1, -1), (-1, 1)]
    for attack in pawn_attacks:
        new_row = king_row + attack[0]
        new_col = king_col + attack[1]
        if 0 <= new_row < 8 and 0 <= new_col < 8:
            if board[new_row][new_col] == 'p':
                return True

    return False
